#
#   module  : tutorial.joy
#   version : 1.4
#   date    : 07/08/19
#
111 222 + .
1 2 + 3 4 + * .
DEFINE	nl == 10 putch .
2 2 + 2 2 * = put_bool nl .
DEFINE	> == swap < .
6 6 * 5 7 * > put_bool nl .
true false or true and not put_bool nl .
DEFINE	reverse == [] swap shunt ;
	shunt == [cnos] step ;
	cnos == swap cons .
[1 2 3 4 5] reverse .
DEFINE	concat == [reverse] c shunt ;
	c == [swap] dip i .
[peter paul] [mary jane] concat .
DEFINE	last == dup rest null [first] [rest last] branch ;
	rest == uncons swap pop ;
	null == 0 = ;
	car == uncons pop ;
	first == uncons pop ;
	branch == swap pair index i ;
	pair == [] cons cons .
[11 false 'X 44] last .
DEFINE	member == swap contains ;
	contains == false swap [= or] cons fold ;
	fold == [swap] dip step .
3 [1 5 3 4 2] member put_bool nl .
3 [1 5 6 4 2] member put_bool nl .
DEFINE	sum == 0 [+] fold ;
	space == 32 putch ;
	product == 1 [*] fold .
[1 2 3 4] dup sum put space product .
111 [222 333] cons .
DEFINE	putsp == put space ;
	putln == put nl .
[11 22 33 44 55] uncons uncons putsp putsp putsp nl .
DEFINE	put_list_ch == '[ putch [putch space] step '] putch ;
	length == 0 [pop 1 +] fold .
['a 'b] ['d 'e 'f] concat dup put_list_ch nl
uncons uncons 'c swap cons cons cons dup put_list_ch nl
dup length .
reverse length .
get get + .
123 456
111 222 [+ putln] i .
111 [putln +] reverse 222 swap i .
3 7 100 [*] dip + .
[1 2 3] [dup * putsp] step nl .
2 [dup *] i .
DEFINE	twice == dup b ;
	b == [i] dip i .
2 [dup *] twice .
DEFINE	thrice == dup [twice] dip i .
2 [dup *] thrice .
DEFINE	square == dup * ;
	pred == 1 - ;
	times == dup 0 = [pop pop] [[dup [i] dip] dip pred times] branch .
2 [square] 0 times .
2 [square] 1 times .
2 [square] 2 times .
2 [square] 3 times .
2 [square] 4 times .
2 [square] 5 times put_int nl .
[7] 10 times stack .
DEFINE	map == maprev reverse ;
	maprev == [] rollup shuntmap ;
	rollup == swap [swap] dip ;
	shuntmap == [[cnos] b] cons step .
[1 2 3] [dup *] map .
[1 2 3] 0 [dup * +] fold .
DEFINE	unit == [] cons ;
	construct2 == [[nullary] cons dip swap] map ;
	nullary == stack swap dip rest cons unstack .
11 12 [[+] [*] [pop unit] [dup pair]] construct2 .
DEFINE	unpair == uncons uncons pop .
11 12 [[pair [square] map unpair +] [pop] []] construct2 .
[] unstack 11111 .
64 .
64 .
255 .
'\065 putch nl .
'\097 putch nl .
'g putch nl .
[Smith Jones Robinson] last .
DEFINE	definition == first body .
[last] definition .
[Smith Jones Robinson] [last] definition i .
DEFINE	cdr == uncons swap pop ;
	x == dup i .
[Smith Jones Robinson]
[swap dup rest null [car swap pop] [cdr swap x] branch] x .
DEFINE	y == fix i ;
	fix == [duco] first swap cons duco ;
	duco == dup cons .
[Smith Jones Robinson]
[swap dup rest null [car swap pop] [cdr swap i] branch] y .
DEFINE	succ == 1 + ;
	<= == succ < ;
	factorial_rec == dup 1 <= [pop 1] [dup pred factorial_rec *] branch .
6 factorial_rec .
DEFINE	rolldown == [swap] dip swap .
6 [swap dup 1 <= [pop pop 1] [dup pred rolldown x *] branch] x .
6 [swap dup 1 <= [pop pop 1] [dup pred rolldown i *] branch] y .
DEFINE	small == dup null [pop true] [uncons swap pop null] branch ;
	quicksort == dup small [] [partition quicksort [quicksort] dip concat]
		     branch ;
	partition == [[] []] dip dup [first > [cnos] [swap [cnos] dip] branch]
		     cons [dup] first cnos step .
[1 9 2 8 3 7 4 6 5] quicksort .
[5 6 4 7 3 8 2 9 1] quicksort .
[1 2 3 4 5 6 7 8 9] quicksort .
[9 8 7 6 5 4 3 2 1] quicksort .
[quicksort] definition .
DEFINE	quicksort1 == dup small [] [partition1 quicksort1 [quicksort1] dip
		      concat] branch ;
	partition1 == [[] []] dip dup first [first > [cnos] [swap [cnos] dip]
		      branch] cons [first] first cnos [dup] first cnos step .
[[1 Smith] [3 Jones] [2 Robinson] [4 Brown]] quicksort1 .
DEFINE	gt == lt not ;
	quicksort2 == dup small [] [partition2 quicksort2 [quicksort2] dip
		      concat] branch ;
	partition2 == [[] []] dip dup first [first gt [cnos] [swap [cnos] dip]
		      branch] cons [first] first cnos [dup] first cnos step .
[] [NURKS Peter 1989 year 3 major Computer Science] cnos
   [ABELSON Mary 1990 year 2 major Logic] cnos
   [ZEEMAN Fred 1988 year 2 major Accounting] cnos
   [MORRIS Janna 1992 year 1 major undecided] cnos
quicksort2 dup [putln] step pop .
